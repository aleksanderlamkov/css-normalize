@use 'sass:meta';
@use 'sass:math';

@use '../variables';

// Удаление единиц измерения
@function strip-units($number) {
  @if meta.type-of($number) == 'number' and not math.is-unitless($number) {
    @return math.div($number, 1); // Эффективное удаление единиц измерения
  }
  @return $number;
}

// Округление
@function rounding($value, $exp: 100) {
  @return math.div(math.round($value * $exp), $exp); // Используем math.round для точности
}
@function rounding($value, $exp: 100) {
  @return math.div(math.round($value * $exp), $exp);
}
// Преобразование PX в REM
@function toRem($pixel) {
  @if math.is-unitless($pixel) {
    @return #{rounding(math.div($pixel, variables.$BASE_FONT_SIZE), 1000)}rem; // Используем $BASE_FONT_SIZE: 16; в качестве базового значения
  } @else {
    @error 'Не используйте единицы измерения при работе с функцией toRem()! Передавайте аргументом только числа.';
  }
}

@function clamp1($min, $max) {
  @if $min == $max {
    @return toRem($max); // Если минимальное значение равно максимальному, возвращаем единицу в rem
  }

  // Вычисляем коэффициент для масштаба
  $slope: math.div($max - $min, variables.$VIEWPORT-MAX - variables.$VIEWPORT-MIN);
  $yAxisIntersection: math.div(
    -(variables.$VIEWPORT-MIN) * $slope + $min,
    variables.$BASE_FONT_SIZE
  );

  // Возвращаем результат с использованием clamp
  $clampMin: toRem($min);
  $clampMax: toRem($max);
  $clampVal: calc(
    #{rounding(strip-units($yAxisIntersection), 1000)}rem + #{rounding($slope * 100)}vw
  );

  @return clamp($clampMin, $clampVal, $clampMax);
}

@function clamp2($min, $max) {
  @if $min == $max {
    @return toRem($max); // Если минимальное значение равно максимальному, возвращаем единицу в rem
  }
  // Возвращаем результат с использованием clamp
  $clampMin: toRem($min);
  $clampVal: calc(math.div(strip-units($max), strip-units(variables.$VIEWPORT-MAX)) * 100);
  $clampMax: toRem($max);

  @return clamp($clampMin, #{rounding($clampVal)}vw, $clampMax);
}
