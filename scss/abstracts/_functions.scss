@use "sass:meta";
@use 'sass:math';

@use "variables";

// Удаление едениц измерения
@function strip-units($number) {
  @if meta.type-of($number)=='number' and not math.is-unitless($number) {
    @return math.div($number, $number * 0 + 1);
  }

  @return $number;
}

// Округление
@function rounding($value, $exp: 100) {
  @return math.div(math.ceil(calc($value * $exp)), $exp);
}


// преобразоваание PX в REM
@function toRem($pixel) {
  @if math.is-unitless($pixel) {
    //@return #{rounding(math.div($pixel, variables.16), 1000)}rem;
    @return #{rounding(math.div($pixel,  16), 1000)}rem;
  } @else {
    @error 'Не используйте единицы измерения при работе с функцией toRem()! Передавайте аргументом только числа.'
  }
}

@function clamp1($min, $max) {
  @if $min ==$max {
    @return toRem($max);
  }
  @else {
    $slope: math.div($max - $min, variables.$VIEWPORT-MAX - variables.$VIEWPORT-MIN);
    $yAxisIntersection: math.div(-(variables.$VIEWPORT-MIN) * $slope + $min, variables.$BASE_FONT_SIZE);

    $clampMin: toRem($min);
    $clampVal: calc(#{rounding(strip-units($yAxisIntersection), 1000)}rem + #{rounding($slope * 100)}vw);
    $clampMax: toRem($max);

    @return clamp($clampMin, $clampVal, $clampMax);
  }
}

@function clamp2($min, $max) {
  $clampMin: toRem($min);
  //  $clampVal: calc(math.div(strip-units($max), strip-units(variables.$VIEWPORT-MAX)) * 100);
  $clampVal: calc(math.div(strip-units($max), strip-units(variables.$VIEWPORT-MAX)) * 100);
  $clampMax: toRem($max);

  @return clamp($clampMin, #{rounding($clampVal)}vw, $clampMax);
}